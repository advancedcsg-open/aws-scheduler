service: aws-scheduler-v2

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'prod'}
  region: ${opt:region, 'eu-west-2'}
  environment:
    STAGE: "${self:provider.stage}"
  tags:
    department: research
    project: aws-scheduler
  apiKeys:
    - name: api-key-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:DeleteItem
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:GetShardIterator
        - dynamodb:UpdateItem
      Resource:
        - "${self:custom.table.arn}"
        - "${self:custom.cron_table.arn}"
        - "Fn::Join": ["/", ["${self:custom.table.arn}", "index/*"]]
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: { "Fn::Join": [":", ["arn:aws:lambda:${self:provider.region}", { "Ref": "AWS::AccountId" }, "function", "${self:custom.scheduleFunction}" ] ]  }
    - Effect: Allow
      Action:
        - SQS:SendMessage
      Resource:
      - "${self:custom.queue.arn}"
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource:
      - "*"
    - Effect: Allow
      Action:
        - cloudwatch:PutMetricData
      Resource: "*"

custom:
  customDomain:
    domainName: platformschedular.oneadvanced.io
    stage: prod
    basePath: ''
    certificateName: 'platformschedular.oneadvanced.io'
    createRoute53Record: true
    endpointType: 'regional'
    securityPolicy: tls_1_2
    apiType: rest
    autoDomain: false
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
  inbound:
    name: "scheduler-input-v2-${self:provider.stage}"
    arn: { "Fn::Join": [":", ["arn:aws:sns:${self:provider.region}", { "Ref": "AWS::AccountId" }, "${self:custom.inbound.name}" ] ]  }
  queue:
    name: "scheduler-queue-v2-${self:provider.stage}"
    arn: { "Fn::Join": [":", ["arn:aws:sqs:${self:provider.region}", { "Ref": "AWS::AccountId" }, "${self:custom.queue.name}" ] ]  }
    url: { "Fn::Join": ["/", ["https://sqs.${self:provider.region}.amazonaws.com", { "Ref": "AWS::AccountId" }, "${self:custom.queue.name}" ] ]  }
  table:
    arn: { "Fn::Join": [":", ["arn:aws:dynamodb:${self:provider.region}", { "Ref": "AWS::AccountId" }, "table/aws-scheduler-events-v2-${self:provider.stage}" ] ]  }
  cron_table:
    arn: { "Fn::Join": [":", ["arn:aws:dynamodb:${self:provider.region}", { "Ref": "AWS::AccountId" }, "table/aws-scheduler-cron-events-v2-${self:provider.stage}" ] ]  }
  scheduleFunction: "aws-scheduler-v2-${self:provider.stage}-scheduler"

functions:
  consumer:
    handler: handler.consumer
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - 'arn:aws:sns'
                - Ref: 'AWS::Region'
                - Ref: 'AWS::AccountId'
                - "${self:custom.inbound.name}"
          topicName: "${self:custom.inbound.name}"
    environment:
      ENFORCE_USER: true
      QUEUE_URL: "${self:custom.queue.url}"
    tags:
      resource: aws-scheduler-consumer

  eventLoader:
    handler: handler.event_loader
    events:
      - schedule: rate(1 minute)
    environment:
      SCHEDULE_FUNCTION: "${self:custom.scheduleFunction}"
    # when we have to wait for DynamoDB autoscaling we may exceed the default of 6s
    timeout: 30
    tags:
      resource: aws-scheduler-event-loader

  scheduler:
    handler: handler.scheduler
    environment:
      QUEUE_URL: "${self:custom.queue.url}"
    # when we have to wait for DynamoDB autoscaling we may exceed the default of 6s
    timeout: 30
    tags:
      resource: aws-scheduler-scheduler

  emitter:
    handler: handler.emitter
    events:
      - sqs:
          arn:
            Fn::Join:
              - ':'
              - - arn
                - aws
                - sqs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - "${self:custom.queue.name}"
    timeout: 20
    tags:
      resource: aws-scheduler-emitter

  app:
    handler: wsgi.handler
    events:
      - http: 
          path: /
          method: ANY
          private: true
      - http: 
          path: '{proxy+}'
          method: ANY
          private: true
    environment:
      TOPIC_URL: "${self:custom.inbound.arn}"
  

plugins:
  - serverless-domain-manager
  - serverless-python-requirements
  - serverless-wsgi

package:
  exclude:
    - venv/**
    - node_modules/**
